{"version":3,"sources":["components/SideDrawer/DrawerToggleBtn.jsx","components/MenuItems/MenuItems.jsx","components/Toolbar/Toolbar.jsx","components/SideDrawer/SideDrawer.jsx","components/BackDrop/Backdrop.jsx","components/Footer/Footer.jsx","components/ScrollToTop.jsx","cards/CardFuncs.js","cards/FilmCards.jsx","cards/PeopleCards.jsx","cards/PlanetCards.jsx","cards/SpeciesCards.jsx","cards/StarshipCards.jsx","cards/VehicleCards.jsx","App.js","serviceWorker.js","index.js"],"names":["drawerToggleBtn","props","react_default","a","createElement","className","onClick","click","menuItems","react_router_dom","to","toolbar","SideDrawer_DrawerToggleBtn","drawerClickHandler","MenuItems","sideDrawer","drawerClasses","show","backdrop","footer","ScrollToTop","prevProps","this","location","pathname","window","scrollTo","children","Component","withRouter","localizeNumeric","origStr","isNaN","Number","toLocaleString","romanize","num","NaN","digits","String","split","key","roman","i","pop","Array","join","fullUrlFromPath","path","FilmList","_ref","films","universe","length","map","origUrl","CardFuncs_FilmLink","FilmLink","_ref2","arr","localUrl","name","get","episode_id","title","CharacterList","_ref3","characters","CardFuncs_PersonLink","PersonLink","_ref4","people","PlanetList","_ref5","planets","CardFuncs_PlanetLink","PlanetLink","_ref6","useSpan","SpeciesList","_ref7","species","CardFuncs_SpeciesLink","SpeciesLink","_ref8","StarshipList","_ref9","starships","CardFuncs_StarshipLink","StarshipLink","_ref10","VehicleList","_ref11","vehicles","CardFuncs_VehicleLink","VehicleLink","_ref12","FilmCards","cardList","Object","toConsumableArray","values","data","FilmCards_FilmCard","url","film","FilmCard","director","FilmDetail","match","detailUrl","opening_crawl","producer","release_date","CardFuncs_CharacterList","CardFuncs_PlanetList","CardFuncs_SpeciesList","CardFuncs_StarshipList","CardFuncs_VehicleList","FilmPage","react_router","exact","render","FilmCards_FilmCards","FilmCards_FilmDetail","PeopleCards","PeopleCards_PersonCard","person","PersonCard","gender","height","PersonDetail","birth_year","hair_color","eye_color","skin_color","mass","homeworld","CardFuncs_FilmList","PeoplePage","PeopleCards_PeopleCards","PeopleCards_PersonDetail","PlanetCards","PlanetCards_PlanetCard","planet","PlanetCard","population","terrain","PlanetDetail","climate","diameter","surface_water","gravity","orbital_period","rotation_period","residents","PlanetsPage","PlanetCards_PlanetCards","PlanetCards_PlanetDetail","SpeciesCards","SpeciesCards_SpeciesCard","SpeciesCard","classification","language","SpeciesDetail","average_height","designation","eye_colors","hair_colors","skin_colors","SpeciesPage","SpeciesCards_SpeciesCards","SpeciesCards_SpeciesDetail","StarshipCards","StarshipCards_StarshipCard","starship","StarshipCard","starship_class","crew","passengers","StarshipDetail","model","cargo_capacity","MGLT","hyperdrive_rating","max_atmosphering_speed","consumables","manufacturer","cost_in_credits","pilots","StarshipPage","StarshipCards_StarshipCards","StarshipCards_StarshipDetail","VehicleCards","VehicleCards_VehicleCard","vehicle","VehicleCard","vehicle_class","VehicleDetail","VehiclePage","VehicleCards_VehicleCards","VehicleCards_VehicleDetail","urls","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","loadMapOfObjects","asyncToGenerator","regenerator_default","mark","_callee","reportedCount","nextUrl","response","jsonObj","urlSplit","dataType","wrap","_context","prev","next","Map","fetch","sent","ok","Error","status","json","count","results","forEach","element","push","t0","sort","b","abrupt","localeCompare","set","size","console","log","stop","_x","apply","arguments","componentDidMount","_callee2","errorString","_context2","Promise","all","slicedToArray","setState","loadingMessage","message","drawerToggleClickHandler","prevState","sideDrawerOpen","backdropClickHandler","state","_this2","BackDrop_Backdrop","basename","Toolbar_Toolbar","SideDrawer_SideDrawer","components_ScrollToTop","cards_FilmCards","cards_PeopleCards","cards_PlanetCards","cards_SpeciesCards","cards_StarshipCards","cards_VehicleCards","Footer_Footer","Boolean","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca57473b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './DrawerToggleBtn.css';\n\n// Hamburger menu toggle button\nconst drawerToggleBtn = props => (\n    <button className='toggle-button' onClick={props.click}>\n        <div className='toggle-button__line' />\n        <div className='toggle-button__line' />\n        <div className='toggle-button__line' />\n    </button>\n);\n\nexport default drawerToggleBtn;","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst menuItems = props => (\n    <ul>\n        <li><Link to=\"/films\">Films</Link></li>\n        <li><Link to=\"/people\">Characters</Link></li>\n        <li><Link to=\"/planets\">Planets</Link></li>\n        <li><Link to=\"/species\">Species</Link></li>\n        <li><Link to=\"/starships\">Starships</Link></li>\n        <li><Link to=\"/vehicles\">Vehicles</Link></li>\n    </ul>\n);\n\nexport default menuItems;","import React from 'react';\n\nimport DrawerToggleBtn from '../SideDrawer/DrawerToggleBtn';\nimport MenuItems from '../MenuItems/MenuItems';\nimport { Link } from 'react-router-dom';\n\nimport './Toolbar.css';\n\nconst toolbar = props => (\n    <header className='toolbar'>\n        <nav className='toolbar__navigation'>\n            <div className='toolbar__toggle-button'>\n                <DrawerToggleBtn click={props.drawerClickHandler} />\n            </div>\n            <div className='toolbar__logo'><Link to=\"/\">Star Wars Universe</Link></div>\n            <div className='toolbar__navigation-items'>\n                <MenuItems />\n            </div>\n        </nav>\n    </header>\n);\n\nexport default toolbar;","import React from 'react';\n\nimport './SideDrawer.css'\nimport MenuItems from '../MenuItems/MenuItems';\n\nconst sideDrawer = props => {\n    let drawerClasses = (props.show) ? 'side-drawer open' : 'side-drawer';\n    return (\n        <nav className={drawerClasses}>\n            <MenuItems />\n        </nav>\n    );\n};\n\nexport default sideDrawer;","import React from 'react';\n\nimport './Backdrop.css';\n\nconst backdrop = props => (\n    <div className='backdrop' onClick={props.click} />\n);\n\nexport default backdrop;","import React from 'react';\n\nimport './Footer.css';\n\nconst footer = props => (\n    <div className='footer'>\n        App by Glen Cunningham\n    </div>\n);\n\nexport default footer;","import {Component} from 'react';\nimport {withRouter} from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n    componentDidUpdate(prevProps) {\n        if (this.props.location.pathname !== prevProps.location.pathname) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        return this.props.children;\n    }\n}\n\nexport default withRouter(ScrollToTop);\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport function localizeNumeric(origStr) {\n    // Add commas to numeric string, unless NaN\n    return isNaN(origStr) ? origStr : Number(origStr).toLocaleString();\n}\n\nexport function romanize(num) {\n    if (isNaN(num))\n        return NaN;\n    var digits = String(+num).split(\"\"),\n        key = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\", \"DC\", \"DCC\", \"DCCC\", \"CM\",\n            \"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\", \"LX\", \"LXX\", \"LXXX\", \"XC\",\n            \"\", \"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\"],\n        roman = \"\",\n        i = 3;\n    while (i--)\n        roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\n    return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\n}\n\nexport function fullUrlFromPath(path) {\n    // We need this to extract data from the films, planets... maps\n    return 'https://swapi.co/api' + path + '/';\n}\n\nexport const FilmList = ({ films, universe }) => {\n    if (!films.length) {\n        return <div></div>;\n    } else {\n        return (\n            <div className='film-list'>\n                <h3 className='list-title'>Films:</h3>\n                {\n                    films.map(origUrl => (\n                        <FilmLink key={origUrl} origUrl={origUrl}\n                            universe={universe} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nconst FilmLink = ({ origUrl, universe }) => {\n    const { films } = universe;\n    const arr = origUrl.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/films/' + number;\n    const name = romanize(films.get(origUrl).episode_id)\n        + ': ' + films.get(origUrl).title;\n    return (\n        <div className='film-link'>\n            <Link to={localUrl}>{name}</Link>\n        </div>\n    );\n}\n\nexport const CharacterList = ({ characters, universe, title }) => {\n    title = title || 'Characters'\n    if (!characters.length) {\n        return <div></div>;\n    } else {\n        return (\n            <div className='character-list'>\n                <h3 className='list-title'>{title}:</h3>\n                {\n                    characters.map(origUrl => (\n                        <PersonLink key={origUrl} origUrl={origUrl}\n                            universe={universe} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nconst PersonLink = ({ origUrl, universe }) => {\n    const { people } = universe;\n    const arr = origUrl.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/people/' + number;\n    const name = people.get(origUrl).name;\n    return (\n        <div className='person-link'>\n            <Link to={localUrl}>{name}</Link>\n        </div>\n    );\n}\n\nexport const PlanetList = ({ planets, universe }) => {\n    if (!planets.length) {\n        return <div></div>;\n    } else {\n        return (\n            <div className='planet-list'>\n                <h3 className='list-title'>Planets:</h3>\n                {\n                    planets.map(origUrl => (\n                        <PlanetLink key={origUrl} origUrl={origUrl}\n                            universe={universe} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport const PlanetLink = ({ origUrl, universe, useSpan }) => {\n    useSpan = useSpan || false;     // default is false\n    const { planets } = universe;\n    const arr = origUrl.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/planets/' + number;\n    const name = planets.get(origUrl).name;\n    if (useSpan) {\n        return (\n            <span className='planet-link'>\n                <Link to={localUrl}>{name}</Link>\n            </span>\n        );\n    } else {\n        return (\n            <div className='planet-link'>\n                <Link to={localUrl}>{name}</Link>\n            </div>\n        );\n    }\n}\n\nexport const SpeciesList = ({ species, universe }) => {\n    if (!species.length) {\n        return <div></div>;\n    } else {\n        return (\n            <div className='species-list'>\n                <h3 className='list-title'>Species:</h3>\n                {\n                    species.map(origUrl => (\n                        <SpeciesLink key={origUrl} origUrl={origUrl}\n                            universe={universe} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nexport const SpeciesLink = ({ origUrl, universe }) => {\n    const { species } = universe;\n    const arr = origUrl.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/species/' + number;\n    const name = species.get(origUrl).name;\n    return (\n        <div className='species-link'>\n            <Link to={localUrl}>{name}</Link>\n        </div>\n    );\n}\n\nexport const StarshipList = ({ starships, universe }) => {\n    if (!starships.length) {\n        return <div></div>;\n    } else {\n        return (\n            <div className='starships-list'>\n                <h3 className='list-title'>Starships:</h3>\n                {\n                    starships.map(origUrl => (\n                        <StarshipLink key={origUrl} origUrl={origUrl}\n                            universe={universe} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nconst StarshipLink = ({ origUrl, universe }) => {\n    const { starships } = universe;\n    const arr = origUrl.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/starships/' + number;\n    const name = starships.get(origUrl).name;\n    return (\n        <div className='starship-link'>\n            <Link to={localUrl}>{name}</Link>\n        </div>\n    );\n}\n\nexport const VehicleList = ({ vehicles, universe }) => {\n    if (!vehicles.length) {\n        return <div></div>;\n    } else {\n        return (\n            <div className='vehicles-list'>\n                <h3 className='list-title'>Vehicles:</h3>\n                {\n                    vehicles.map(origUrl => (\n                        <VehicleLink key={origUrl} origUrl={origUrl}\n                            universe={universe} />\n                    ))\n                }\n            </div>\n        );\n    }\n}\n\nconst VehicleLink = ({ origUrl, universe }) => {\n    const { vehicles } = universe;\n    const arr = origUrl.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/vehicles/' + number;\n    const name = vehicles.get(origUrl).name;\n    return (\n        <div className='vehicle-link'>\n            <Link to={localUrl}>{name}</Link>\n        </div>\n    );\n}","import React from \"react\";\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport {\n    fullUrlFromPath, romanize, CharacterList, PlanetList,\n    SpeciesList, StarshipList, VehicleList } from './CardFuncs';\nimport './Cards.css'\n\nconst FilmPage = ({ universe }) => {\n    return (\n        <Switch>\n            <Route exact path='/films' render={() => (<FilmCards universe={universe} />)} />\n            <Route path='/films/:number' render={\n                ({ match }) => (<FilmDetail match={match} universe={universe} />)\n            } />\n        </Switch>\n    );\n};\n\nconst FilmCards = ({ universe }) => {\n    // destructure the universe!\n    const { films } = universe;\n    // convert map of url key, json data pairs into an array of json data\n    // [...dataMap.values()] is equivalent to Array.from(dataMap.values())\n    const cardList =\n        [...films.values()].map(data =>\n            <FilmCard key={data.url} film={data} />);\n    return (\n        <div>\n            <div className='category-titlebar'>\n                <h1 className='card'>Films</h1>\n            </div>\n            <div className='card-list'>\n                {cardList}\n            </div>\n        </div>\n    );\n}\n\nconst FilmCard = ({ film }) => {\n    const arr = film.url.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/films/' + number;\n    return (\n        <Link to={localUrl} className='card grow'>\n            <h2>{film.title}</h2>\n            <p>Episode {romanize(film.episode_id)}</p>\n            <p>Director: {film.director}</p>\n        </Link>\n    );\n}\n\nconst FilmDetail = ({ match, universe }) => {\n    const detailUrl = fullUrlFromPath(match.url);\n    // destructure the universe!\n    const { films } = universe;\n    const film = films.get(detailUrl);\n    return (\n        <div className='detail'>\n            <h1>{film.title}</h1>\n            <h2>Episode: {romanize(film.episode_id)}</h2>\n            <pre>{film.opening_crawl}</pre>\n            <h3>Director: {film.director}</h3>\n            <h3>Producer: {film.producer}</h3>\n            <h3>Release Date: {film.release_date}</h3>\n            <CharacterList characters={film.characters}\n                universe={universe} />\n            <PlanetList planets={film.planets}\n                universe={universe} />\n            <SpeciesList species={film.species}\n                universe={universe} />\n            <StarshipList starships={film.starships}\n                universe={universe} />\n            <VehicleList vehicles={film.vehicles}\n                universe={universe} />\n        </div>\n    );\n}\n\nexport default FilmPage;","import React from \"react\";\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport {\n    fullUrlFromPath, FilmList, PlanetLink, SpeciesList,\n    StarshipList, VehicleList\n} from './CardFuncs';\nimport './Cards.css'\n\nconst PeoplePage = ({ universe }) => {\n    return (\n        <Switch>\n            <Route exact path='/people' render={() => (<PeopleCards universe={universe} />)} />\n            <Route path='/people/:number' render={\n                ({ match }) => (<PersonDetail match={match} universe={universe} />)\n            } />\n        </Switch>\n    );\n};\n\nconst PeopleCards = ({ universe }) => {\n    // destructure the universe!\n    const { people } = universe;\n    // convert map of url key, json data pairs into an array of json data\n    // [...dataMap.values()] is equivalent to Array.from(dataMap.values())\n    const cardList =\n        [...people.values()].map(data =>\n            <PersonCard key={data.url} person={data} />);\n    return (\n        <div>\n            <div className='category-titlebar'>\n                <h1 className='card'>Characters</h1>\n            </div>\n            <div className='card-list'>\n                {cardList}\n            </div>\n        </div>\n    );\n};\n\nconst PersonCard = ({ person }) => {\n    const arr = person.url.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/people/' + number;\n    return (\n        <Link to={localUrl} className='card grow'>\n            <h2>{person.name}</h2>\n            <p>Gender: {person.gender}</p>\n            <p>Height (cm): {person.height}</p>\n        </Link>\n    );\n}\n\nconst PersonDetail = ({ match, universe }) => {\n    const detailUrl = fullUrlFromPath(match.url);\n    // destructure the universe!\n    const { people } = universe;\n    const person = people.get(detailUrl);\n    return (\n        <div className='detail'>\n            <h1>{person.name}</h1>\n            <h3>Gender: {person.gender}</h3>\n            <h3>Height (cm): {person.height}</h3>\n            <h3>Birth Year: {person.birth_year}</h3>\n            <h3>Hair Color: {person.hair_color}</h3>\n            <h3>Eye Color: {person.eye_color}</h3>\n            <h3>Skin Color: {person.skin_color}</h3>\n            <h3>Mass (kg): {person.mass}</h3>\n            <h3><span>Homeworld: </span>\n                <PlanetLink origUrl={person.homeworld} universe={universe} useSpan={true} />\n            </h3>\n            <SpeciesList species={person.species}\n                universe={universe} />\n            <FilmList films={person.films}\n                universe={universe} />\n            <StarshipList starships={person.starships}\n                universe={universe} />\n            <VehicleList vehicles={person.vehicles}\n                universe={universe} />\n        </div>\n    );\n}\n\nexport default PeoplePage;","import React from \"react\";\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport {\n    fullUrlFromPath, localizeNumeric, CharacterList, FilmList } from './CardFuncs';\nimport './Cards.css'\n\nconst PlanetsPage = ({ universe }) => {\n    return (\n        <Switch>\n            <Route exact path='/planets' render={() => (<PlanetCards universe={universe} />)} />\n            <Route path='/planets/:number' render={\n                ({ match }) => (<PlanetDetail match={match} universe={universe} />)\n            } />\n        </Switch>\n    );\n};\n\nconst PlanetCards = ({universe}) => {\n    // destructure the universe!\n    const { planets } = universe;\n    // convert map of url key, json data pairs into an array of json data\n    // [...dataMap.values()] is equivalent to Array.from(dataMap.values())\n    const cardList =\n        [...planets.values()].map(data =>\n            <PlanetCard key={data.url} planet={data} />);\n    return (\n        <div>\n            <div className='category-titlebar'>\n                <h1 className='card'>Planets</h1>\n            </div>\n            <div className='card-list'>\n                {cardList}\n            </div>\n        </div>\n    );\n};\n\nconst PlanetCard = ({planet}) => {\n    const arr = planet.url.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/planets/' + number;\n    return (\n        <Link to={localUrl} className='card grow'>\n            <h2>{planet.name}</h2>\n            <p>Population: {localizeNumeric(planet.population)}</p>\n            <p>Terrain: {planet.terrain}</p>\n        </Link>\n    );\n}\n\nconst PlanetDetail = ({ match, universe }) => {\n    const detailUrl = fullUrlFromPath(match.url);\n    // destructure the universe!\n    const { planets } = universe;\n    const planet = planets.get(detailUrl);\n    return (\n        <div className='detail'>\n            <h1>{planet.name}</h1>\n            <h2>Population: {localizeNumeric(planet.population)}</h2>\n            <h2>Terrain: {planet.terrain}</h2>\n            <h3>Climate: {planet.climate}</h3>\n            <h3>Diameter: {localizeNumeric(planet.diameter)}</h3>\n            <h3>Surface Water (%): {planet.surface_water}</h3>\n            <h3>Gravity: {planet.gravity}</h3>\n            <h3>Orbital Period: {planet.orbital_period}</h3>\n            <h3>Rotation Period: {planet.rotation_period}</h3>\n            <FilmList films={planet.films}\n                universe={universe} />\n            <CharacterList characters={planet.residents} title='Residents'\n                universe={universe} />\n        </div>\n    );\n}\n\nexport default PlanetsPage;","import React from \"react\";\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport {\n    fullUrlFromPath, CharacterList, PlanetLink, FilmList } from './CardFuncs';\nimport './Cards.css'\n\nconst SpeciesPage = ({ universe }) => {\n    return (\n        <Switch>\n            <Route exact path='/species' render={() => (<SpeciesCards universe={universe} />)} />\n            <Route path='/species/:number' render={\n                ({ match }) => (<SpeciesDetail match={match} universe={universe} />)\n            } />\n        </Switch>\n    );\n};\n\nconst SpeciesCards = ({universe}) => {\n    // destructure the universe!\n    const { species } = universe;\n    // convert map of url key, json data pairs into an array of json data\n    // [...dataMap.values()] is equivalent to Array.from(dataMap.values())\n\n    const cardList =\n        [...species.values()].map(data =>\n            <SpeciesCard key={data.url} species={data} />);\n    return (\n        <div>\n            <div className='category-titlebar'>\n                <h1 className='card'>Species</h1>\n            </div>\n            <div className='card-list'>\n                {cardList}\n            </div>\n        </div>\n    );\n};\n\nconst SpeciesCard = ({species}) => {\n    const arr = species.url.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/species/' + number;\n    return (\n        <Link to={localUrl} className='card grow'>\n            <h2>{species.name}</h2>\n            <p>Classification: {species.classification}</p>\n            <p>Language: {species.language}</p>\n        </Link>\n    );\n}\n\nconst SpeciesDetail = ({ match, universe }) => {\n    const detailUrl = fullUrlFromPath(match.url);\n    // destructure the universe!\n    let { species } = universe;\n    const allSpecies = species;\n    species = allSpecies.get(detailUrl);\n    return (\n        <div className='detail'>\n            <h1>{species.name}</h1>\n            <h2>Classification: {species.classification}</h2>\n            <h2>Language: {species.language}</h2>\n            <h3>Avg Height (cm): {species.average_height}</h3>\n            <h3>Designation: {species.designation}</h3>\n            <h3>Eye Colors: {species.eye_colors}</h3>\n            <h3>Hair Colors: {species.hair_colors}</h3>\n            <h3>Skin Colors: {species.skin_colors}</h3>\n\n            <h3><span>Homeworld: </span>\n                <PlanetLink origUrl={species.homeworld} universe={universe} useSpan={true} />\n            </h3>\n\n            <FilmList films={species.films}\n                universe={universe} />\n            <CharacterList characters={species.people}\n                universe={universe} />\n        </div>\n    );\n}\n\nexport default SpeciesPage;","import React from \"react\";\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport {\n    fullUrlFromPath, CharacterList, localizeNumeric, FilmList } from './CardFuncs';\nimport './Cards.css'\n\nconst StarshipPage = ({ universe }) => {\n    return (\n        <Switch>\n            <Route exact path='/starships' render={() => (<StarshipCards universe={universe} />)} />\n            <Route path='/starships/:number' render={\n                ({ match }) => (<StarshipDetail match={match} universe={universe} />)\n            } />\n        </Switch>\n    );\n};\n\nconst StarshipCards = ({universe}) => {\n    // destructure the universe!\n    const { starships } = universe;\n    // convert map of url key, json data pairs into an array of json data\n    // [...dataMap.values()] is equivalent to Array.from(dataMap.values())\n\n    const cardList =\n        [...starships.values()].map(data =>\n            <StarshipCard key={data.url} starship={data} />);\n    return (\n        <div>\n            <div className='category-titlebar'>\n                <h1 className='card'>Starships</h1>\n            </div>\n            <div className='card-list'>\n                {cardList}\n            </div>\n        </div>\n    );\n};\n\nconst StarshipCard = ({starship}) => {\n    const arr = starship.url.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/starships/' + number;\n    return (\n        <Link to={localUrl} className='card grow'>\n            <h2>{starship.name}</h2>\n            <p>Class: {starship.starship_class}</p>\n            <p>Crew: {localizeNumeric(starship.crew)}</p>\n            <p>Passengers: {localizeNumeric(starship.passengers)}</p>\n        </Link>\n    );\n}\n\nconst StarshipDetail = ({ match, universe }) => {\n    const detailUrl = fullUrlFromPath(match.url);\n    // destructure the universe!\n    const { starships } = universe;\n    const starship = starships.get(detailUrl);\n    return (\n        <div className='detail'>\n            <h1>{starship.name}</h1>\n            <h2>Class: {starship.starship_class}</h2>\n            <h3>Model: {starship.model}</h3>\n            <h3>Crew: {localizeNumeric(starship.crew)}</h3>\n            <h3>Passengers: {localizeNumeric(starship.passengers)}</h3>\n            <h3>Cargo Capacity: {localizeNumeric(starship.cargo_capacity)}</h3>\n            <h3>Length: {localizeNumeric(starship.length)}</h3>\n            <h3>Sublight Speed (MGLT): {localizeNumeric(starship.MGLT)}</h3>\n            <h3>Hyperdrive Rating: {starship.hyperdrive_rating}</h3>\n            <h3>Max Atmosphering Speed: {localizeNumeric(starship.max_atmosphering_speed)}</h3>\n            <h3>Consumables: {starship.consumables}</h3>\n            <h3>Manufacturer: {starship.manufacturer}</h3>\n            <h3>Cost (credits): {localizeNumeric(starship.cost_in_credits)}</h3>\n            <FilmList films={starship.films}\n                universe={universe} />\n            <CharacterList characters={starship.pilots} title='Pilots'\n                universe={universe} />\n        </div>\n    );\n}\n\nexport default StarshipPage;","import React from \"react\";\nimport { Switch, Route, Link } from 'react-router-dom';\n\nimport {\n    fullUrlFromPath, CharacterList, FilmList, localizeNumeric\n} from './CardFuncs';\nimport './Cards.css'\n\nconst VehiclePage = ({ universe }) => {\n    return (\n        <Switch>\n            <Route exact path='/vehicles' render={() => (<VehicleCards universe={universe} />)} />\n            <Route path='/vehicles/:number' render={\n                ({ match }) => (<VehicleDetail match={match} universe={universe} />)\n            } />\n        </Switch>\n    );\n};\n\nconst VehicleCards = ({ universe }) => {\n    // destructure the universe!\n    const { vehicles } = universe;\n    // convert map of url key, json data pairs into an array of json data\n    // [...dataMap.values()] is equivalent to Array.from(dataMap.values())\n\n    const cardList =\n        [...vehicles.values()].map(data =>\n            <VehicleCard key={data.url} vehicle={data} />);\n    return (\n        <div>\n            <div className='category-titlebar'>\n                <h1 className='card'>Vehicles</h1>\n            </div>\n            <div className='card-list'>\n                {cardList}\n            </div>\n        </div>\n    );\n};\n\nconst VehicleCard = ({ vehicle }) => {\n    const arr = vehicle.url.split('/');\n    const number = arr[arr.length - 2];\n    const localUrl = '/vehicles/' + number;\n    return (\n        <Link to={localUrl} className='card grow'>\n            <h2>{vehicle.name}</h2>\n            <p>Crew: {localizeNumeric(vehicle.crew)}</p>\n            <p>Passengers: {localizeNumeric(vehicle.passengers)}</p>\n            <p>Class: {vehicle.vehicle_class}</p>\n        </Link>\n    );\n}\n\nconst VehicleDetail = ({ match, universe }) => {\n    const detailUrl = fullUrlFromPath(match.url);\n    // destructure the universe!\n    const { vehicles } = universe;\n    const vehicle = vehicles.get(detailUrl);\n    return (\n        <div className='detail'>\n            <h1>{vehicle.name}</h1>\n            <h2>Class: {vehicle.vehicle_class}</h2>\n            <h3>Model: {vehicle.model}</h3>\n            <h3>Crew: {localizeNumeric(vehicle.crew)}</h3>\n            <h3>Passengers: {localizeNumeric(vehicle.passengers)}</h3>\n            <h3>Cargo Capacity: {localizeNumeric(vehicle.cargo_capacity)}</h3>\n            <h3>Length: {localizeNumeric(vehicle.length)}</h3>\n            <h3>Max Atmosphering Speed: {localizeNumeric(vehicle.max_atmosphering_speed)}</h3>\n            <h3>Consumables: {vehicle.consumables}</h3>\n            <h3>Manufacturer: {vehicle.manufacturer}</h3>\n            <h3>Cost (credits): {localizeNumeric(vehicle.cost_in_credits)}</h3>\n            <FilmList films={vehicle.films}\n                universe={universe} />\n            <CharacterList characters={vehicle.pilots} title='Pilots'\n                universe={universe} />\n        </div>\n    );\n}\n\nexport default VehiclePage;","import React, { Component } from 'react';\n\nimport Toolbar from './components/Toolbar/Toolbar';\nimport SideDrawer from './components/SideDrawer/SideDrawer';\nimport Backdrop from './components/BackDrop/Backdrop';\nimport Footer from './components/Footer/Footer';\nimport ScrollToTop from './components/ScrollToTop';\n\nimport FilmPage from './cards/FilmCards';\nimport PeoplePage from './cards/PeopleCards';\nimport PlanetPage from './cards/PlanetCards';\nimport SpeciesPage from './cards/SpeciesCards';\nimport StarshipPage from './cards/StarshipCards';\nimport VehiclePage from './cards/VehicleCards';\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n// TODO: Add clickable links on some cards to jump to other detail\n// cards.  E.g.- home planet should be clickable and jump to that\n// planet's detail.  Or in a list of residents of a planet, be able\n// to jump to the detail on that planet.\n\nconst urls = [\n  'https://swapi.co/api/films/',\n  'https://swapi.co/api/people/',\n  'https://swapi.co/api/planets/',\n  'https://swapi.co/api/species/',\n  'https://swapi.co/api/starships/',\n  'https://swapi.co/api/vehicles/'\n];\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      sideDrawerOpen: false,\n      loadingMessage: 'Loading the universe...',\n    };\n    this.universe = {};\n  }\n\n  loadMapOfObjects = async (url) => {\n    const map = new Map([]);\n    let arr = [];\n    let reportedCount = 0;\n    let nextUrl = url;\n    // read each successive page until no more\n    do {\n      let response = await fetch(nextUrl);\n      // Remember that fetch doesn't throw errors on HTTP 404 or 500,\n      // so we have to check the 'ok' state to catch those too.\n      if (!response.ok) {\n        throw Error(response.status + ' on fetch of ' + response.url);\n      }\n      const jsonObj = await response.json();\n      reportedCount = jsonObj.count;\n\n      // Iterate through the objects on this page and add them to the array\n      jsonObj.results.forEach(element => arr.push(element));\n\n      nextUrl = jsonObj.next;\n    } while (nextUrl);\n    // Sort the array on the appropriate field\n    const urlSplit = url.split('/');\n    const dataType = urlSplit[urlSplit.length - 2];\n    switch (dataType) {\n      case 'films':\n        arr.sort((a, b) => a.episode_id - b.episode_id);\n        break;\n      default:\n        arr.sort((a, b) => a.name.localeCompare(b.name));\n        break;\n    }\n\n    // Convert the array to a map with the URL as the key\n    arr.forEach(element => map.set(element.url, element));\n\n    if (map.size !== reportedCount) {\n      console.log('Expected: ', reportedCount, ' Got: ', map.size, ' for ', url)\n    }\n    return map;\n  }\n\n\n  componentDidMount = async () => {\n    try {\n      const [films, people, planets, species, starships, vehicles] = await Promise.all(\n        // TODO: Add some type of progress indicator, such as telling what type\n        // of data is being loaded, or how many objects so far.\n        urls.map(url => this.loadMapOfObjects(url))\n      );\n      this.universe = { films, people, planets, species, starships, vehicles };\n      // Flag that loading is complete\n      this.setState({\n        loadingMessage: ''\n      });\n    } catch (error) {\n      const errorString = error.name + ': ' + error.message;\n      this.setState({ loadingMessage: errorString });\n    }\n  }\n\n  drawerToggleClickHandler = () => {\n    this.setState((prevState) => {\n      return { sideDrawerOpen: !prevState.sideDrawerOpen };\n    });\n  };\n\n  backdropClickHandler = () => {\n    this.setState({ sideDrawerOpen: false });\n  };\n\n  render() {\n    const loadingMessage = this.state.loadingMessage;\n    const backdrop = (this.state.sideDrawerOpen) ?\n      <Backdrop click={this.backdropClickHandler} /> : null;\n\n    if (loadingMessage.length) {\n      return (\n        <div className='centered-message'>\n          <h2>{loadingMessage}</h2>\n        </div>\n      );\n    } else {\n      return (\n        <Router basename='/starwars-universe'>\n          <div className=\"App\">\n            <Toolbar drawerClickHandler={this.drawerToggleClickHandler} />\n            <SideDrawer show={this.state.sideDrawerOpen} />\n            {backdrop}\n            <main>\n              <Route exact path='/' render={() => (\n                <div className='scroll-up'>\n                  <div>\n                    <h2>Explore the Star Wars Universe!</h2>\n                    <p>Click a menu item to view a category.</p>\n                    <p>Click on any item card in a category for more detail.</p>\n                    <p>Click on any links to jump to that item.</p>\n                    <p>May the Force be with you!</p>\n                  </div>\n                </div>\n              )} />\n              <ScrollToTop>\n                <Switch>\n                  <Route path='/films' render={() => (<FilmPage universe={this.universe} />)} />\n                  <Route path='/people' render={() => (<PeoplePage universe={this.universe} />)} />\n                  <Route path='/planets' render={() => (<PlanetPage universe={this.universe} />)} />\n                  <Route path='/species' render={() => (<SpeciesPage universe={this.universe} />)} />\n                  <Route path='/starships' render={() => (<StarshipPage universe={this.universe} />)} />\n                  <Route path='/vehicles' render={() => (<VehiclePage universe={this.universe} />)} />\n                </Switch>\n              </ScrollToTop>\n            </main>\n            <footer>\n              <Footer />\n            </footer>\n          </div >\n        </Router>\n      );\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}